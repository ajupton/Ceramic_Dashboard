summarise_all(c("VOM", "AV", "VOV") %>%
View()
jars_cont %>%
group_by(Site) %>%
summarise_all(my_mean) %>%
summarise_all(c("VOM", "AV", "VOV")) %>%
View()
jars_cont %>%
group_by(Site) %>%
summarise_all(my_mean) %>%
summarise_all(AV) %>%
View()
View(AV)
jars_cont %>%
group_by(Site) %>%
summarise_all(AV)
View(VOM)
mean(sd(jars$Orifice, na.rm = TRUE), na.rm = TRUE)
jars_cont %>%
group_by(Site) %>%
summarise_all(my_mean) %>%
summarise_all(my_sd)
jars_cont %>%
group_by(Site) %>%
summarise_all(my_mean)
jars_cont %>%
group_by(Site) %>%
summarise_all(my_sd) %>%
summarise_all(my_mean)
jars_cont %>%
group_by(Site) %>%
summarise_all(my_sd)
jars_cont %>%
group_by(Site) %?%
View(my_cv)
jars_cont %>%
group_by(Site) %>%
summarise_all(my_cv) %>%
summarise_all(my_mean) %>%
View()
AV <- function(x){mean(my_cv(x), na.rm = TRUE)}
jars_cont %>%
group_by(Site) %>%
summarise_all(AV) %>%
View()
View(AV)
function(x){my_cv(x) %>%
mean(., na.rm = TRUE)}
AV <- function(x){my_cv(x) %>%
mean(., na.rm = TRUE)}
jars_cont %>%
group_by(Site) %>%
summarise_all(AV) %>%
View()
View(AV)
AV <- function(x){summarise_all(my_cv) %>%
summarise_all(my_mean)}
jars_cont %>%
group_by(Site) %>%
summarise_all(AV) %>%
View()
AV <- function(x){summarise_all(my_cv(x)) %>%
summarise_all(my_mean)}
jars_cont %>%
group_by(Site) %>%
summarise_all(AV) %>%
View()
View(AV)
AV <- function(x){x %>%
group_by(Site) %>%
summarise_all(my_cv) %>%
summarise_all(my_mean)}
AV(jars_cont)
View(AV(jars_cont))
View(my_cv)
ggplot(jars_cont, aes(x = Orifice, y = RimAngle, fill = Site)) + geom_point()
ggplot(jars_cont, aes(x = Orifice, y = RimAngle, col = Site)) + geom_point()
ggplot(jars_cont, aes(x = Orifice, y = RimAngle, col = Site)) + geom_point(position = "jitter")
ggplot(jars_cont, aes(x = Orifice, y = RimAngle, col = Site)) + geom_point(position = "jitter", alpha = 0.8)
ggplot(jars_cont, aes(x = Orifice, y = RimAngle, col = Site), alpha = 0.8) + geom_point(position = "jitter")
View(VOV)
View(AV)
ggplot(jars_cont, aes(x = Orifice, y = RimAngle, col = Site, alpha = 0.8)) + geom_point(position = "jitter")
save.image("~/Dropbox/Dis Data Backup/Data/E-B Data/_EB R Implementation/R_hist 6-4-17_EB Functions.RData")
savehistory("~/Dropbox/Dis Data Backup/Data/E-B Data/_EB R Implementation/R_hist 6-4-17_EB Functions.Rhistory")
rm(list = ls())
quit()
install.packages('knitr')
library('knitr')
library('tidyverse')
install.packages('rmarkdown')
library('rmarkdown')
rm(list = ls())
load("~/Dropbox/Dis Data Backup/Data/E-B Data/_EB R Implementation/R_hist 6-4-17_EB Functions.RData")
rm(jar_wel_post_migration)
rm(jwel_post)
rm(jwel_pre)
rm(jwel_pre_all)
rm(jwelpost)
rm(jwelpre)
rm(pwel_post)
rm(pwel_pre)
rm(pwel_pre_all)
rm(pwelpost)
rm(tjpost)
rm(plate_wel_pre_migration)
rm(multipliers)
View(jar_VOM)
VOM
VOM(jars_cont)
VOV
my_vov
AV
AV(jars_cont)
VOV
VOM
VOM <- function(x){x %>%}
VOM <- function(x){x %>%
group_by(Site) %>%
summarise_all(my_mean) %>%
summarise_all(my_cv)}
VOM(jars_cont)
VOV
my_cv
VOV <- function(x){x %>%
group_by(Site) %>%
summarise_all(my_cv) %>%>
summarise_all(my_cv)}
VOV <- function(x){x %>%
group_by(Site) %>%
summarise_all(my_cv) %>%
summarise_all(my_cv)}
VOV(jars_cont)
?coef
?cv
AV
jars_cont %>%
jars_cont %>%
group_by(Site) %>%
length()
jars_cont %>%
group_by(Site)
?length
jars_cont %>%
group_by(Site) %>%
summarise_all(n())
jars_cont %>%
group_by(Site) %>%
summarise_all(length())
jars_cont %>%
group_by(Site) %>%
summarise_all(length)
jars_cont %>%
summarise_all(length)
jars_cont %>%
summarise_all(n)
View(my_length)
summarise_all(my_length)
jars_cont %>%
summarise_all(my_length)
jars_cont %>%
group_by(Site) %>%
summarise_all(my_length)
Number_of_Vessels <- function(x){x %>%
group_by(Site) %>%
summarise_all(my_length)}
Number_of_Vessels(jars_cont)
Number_of_Vessels <- function(x){x %>%
summarise_all(my_length)}
Number_of_Vessels(jars_cont)
jars_cont %>%
group_by(Site) %>%
summarise_all(my_length)
N_vessel_by_site <- jars_cont %>%
group_by(Site) %>%
summarise_all(my_length)
?summarise_if
N_vessel_by_site <- jars_cont %>%
group_by(Site) %>%
summarise_all(my_length) %>%
summarise_if(> 6, my_sum)
N_vessel_by_site <- jars_cont %>%
group_by(Site) %>%
summarise_all(my_length) %>%
summarise_if(.> 6, my_sum)
N_vessel_by_site <- jars_cont %>%
group_by(Site) %>%
summarise_all(my_length) %>%
count()
jars_cont %>%
+     group_by(Site) %>%
+     summarise_all(my_length) %>%
+     count()
jars_cont %>%
group_by(Site) %>%
summarise_all(my_length) %>%
count()
jars_cont %>%
group_by(Site) %>%
summarise_all(my_length) %>%
group_by(Site) %>%
count()
jars_cont %>%
group_by(Site) %>%
summarise_all(my_length)
jars_cont %>%
group_by(Site) %>%
summarise_all(my_length) %>%
tally()
jars_cont %>%
group_by(Site) %>%
summarise_all(tally)
ncrit <- 6
my_sum
my_mean
my_sum <- function(x){sum(x, na.rm = TRUE)}
my_sum_crit <- function(x){if x > 6 {sum(x, na.rm = TRUE)}}
save.image("~/Dropbox/Dis Data Backup/Data/E-B Data/_EB R Implementation/R_hist 6-7-17_EB Functions.RData")
savehistory("~/Dropbox/Dis Data Backup/Data/E-B Data/_EB R Implementation/R_history 6-7-2017_CVs and Means by site_still need to figure out how to threshold.Rhistory")
quit()
quit()
View(pwel_post)
load("~/Dropbox/Dis Data Backup/Data/Morphology Data Analysis_Dissertation/cowplots of jars and plates/cowplottin of jar and plate data/.RData")
rm(ls = all)
rm(list = ls)
rm(list = ls())
load("~/Dropbox/Dis Data Backup/Data/Morphology Data Analysis_Dissertation/cowplots of jars and plates/cowplottin of jar and plate data/.RData")
rm(list = ls())
load("~/Dropbox/Dis Data Backup/Data/E-B Data/_EB R Implementation/10-16-2017 Env_jar and plate viz_hist_Ridgelines.RData")
View(EB_Metrics_raw)
shiny::runApp('Google Drive/Programming Resources/First_shiny_app')
runApp('Google Drive/Programming Resources/First_shiny_app')
install.packages("rsconnect")
library('rsconnect')
library(shiny)
library(ggplot2)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# Define UI for application that plots features of movies
ui <- fluidPage(
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Outputs
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
# Define server function required to create the scatterplot
server <- function(input, output) {
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library("ggraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
runApp('Google Drive/Programming Resources/First_shiny_app')
runApp('Google Drive/Programming Resources/Shiny_practice')
runApp('Google Drive/Programming Resources/Shiny_practice')
runApp('Google Drive/Programming Resources/Shiny_practice')
runApp('Google Drive/Programming Resources/Shiny_practice')
demo()
??shiny
?shiny
shiny:demo()
shiny::demo()
runExample("03_hello")
runExample("01_hello")
runApp('Google Drive/Programming Resources/Practice')
runApp('Google Drive/Programming Resources/Practice')
runApp('Google Drive/Programming Resources/Practice')
runApp('Google Drive/Programming Resources/Practice')
runApp('Google Drive/Programming Resources/Practice')
dge <- ggplot(jGathered, aes(x = Value, y = Site)) + geom_density_ridges() + facet_wrap(~Attribute, scale = "free") + theme(axis.text.y = element_text(size=9)) + xlab("") + ylab("")
library(ggridges)
pRidge <-  ggplot(pGathered, aes(x = Value, y = Site)) + geom_density_ridges() + facet_wrap(~Attribute, scale = "free") + theme(axis.text.y = element_text(size=9)) + xlab("") + ylab("")
jRidge <- ggplot(jGathered, aes(x = Value, y = Site)) + geom_density_ridges() + facet_wrap(~Attribute, scale = "free") + theme(axis.text.y = element_text(size=9)) + xlab("") + ylab("")
plot_grid(jRidge, pRidge)
library(tidyverse)
library(cowplot)
plot_grid(jRidge, pRidge)
# Chunk 1: setup
library(flexdashboard)
library(tidyverse)
library(cowplot)
# Chunk 2
selectInput("clusterNum", label = h3("Cluster number"),
choices = list("1" = 1, "2" = 2, "3" = 3, "4" = 4, "5" = 5),
selected = 1)
# Chunk 1: setup
library(flexdashboard)
library(tidyverse)
library(cowplot)
# Chunk 2
selectInput("clusterNum", label = h3("Cluster number"),
choices = list("1" = 1, "2" = 2, "3" = 3, "4" = 4, "5" = 5),
selected = 1)
write_csv(jars_cont, "jars_cont.csv")
setwd("~/Google Drive/D copy/Ceramic Dashboard")
setwd("~/Google Drive/D copy/Ceramic Dashboard")
write_csv(jars_cont, "jars_cont.csv")
write_csv(jars_cont_clean, "jars_cont.csv")
write_csv(jar_cont_clean, "jars_cont.csv")
write_csv(plate_cont_clean, "plate_cont.csv")
jars <- read.csv(jars_cont.csv)
jars <- read.csv("jars_cont.csv")
write_csv(plate_cont_clean, "plates_cont.csv")
plates <- read.csv("plates_cont.csv")
View(jars)
View(plates)
plates <- read.csv("plates_cont.csv")
View(plates)
View(plates
)
jars[, Site]
jars[, "Site""]
})
```
jars[, "Site"]
jars[, "Site"]
jars[c("Morton Village", "Crable"), "Site"]
jars[c(Crable"), "Site"]
})
```
jars[c("Crable"), "Site"]
jars[c(Crable), "Site"]
sapply(jars, class)
?read.csv
jars <- read.csv("~/Google Drive/D copy/Ceramic Dashboard/jars_cont.csv", stringsAsFactors = FALSE)
plates <- read.csv("~/Google Drive/D copy/Ceramic Dashboard/plates_cont.csv", stringsAsFactors = FALSE)
jars[c(Crable), "Site"]
jars[c("Crable"), "Site"]
jars[, "Site"]
jars["Crable", "Site"]
View(jars)
?selectInput
ggplot(data = jars, aes_string(x = "Orifice", y = "RimAngle", color = jars$Site)) + geom_point()
jars <- read.csv("~/Google Drive/D copy/Ceramic Dashboard/jars_cont.csv")
ggplot(data = jars, aes_string(x = "Orifice", y = "RimAngle", color = jars$Site)) + geom_point()
levels(jars$Site)
ggplot(data = jars, aes_string(x = "Orifice", y = "RimAngle", color = jars$Site)) + geom_point() + scale_fill_discrete(name = "Site")
ggplot(data = jars, aes_string(x = "Orifice", y = "RimAngle", color = Site)) + geom_point() + scale_fill_discrete(name = "Site")
ggplot(data = jars, aes_string(x = "Orifice", y = "RimAngle", color = "Site")) + geom_point() + scale_fill_discrete(name = "Site")
sapply(jars, class)
install.packages('plotly')
library(plotly)
jnames <- names(jars)
jnames
install.packages("shinythemes")
library(shinythemes)
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
jhist <- jars %>%
group_by(Site)%>%
ggplot() + geom_histogram(aes(x = Site, fill = ..count..), stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") +
scale_fill_gradient2(low=("green4"), high="darkgreen", mid = 1) + xlab("Jars")
ggplotly(jhist)
gather(jars, Attribute, Value)
View(jar_cont_clean)
gather(jar_cont_clean, Attribute, Value, Orifice:MaxTrailing)
jgathered <- gather(jars, Attribute, Value, Orifice:MaxTrailing)
ggplot(jgathered, aes(x = Value, y = Site)) + geom_density_ridges() + facet_wrap(~Attribute, scale = "free") + theme(axis.text.y = element_text(size=9)) + xlab("") + ylab("")
jDensity <- ggplot(jgathered, aes(x = Value, y = Site)) +
geom_density_ridges() +
facet_wrap(~Attribute, scale = "free") +
theme(axis.text.y = element_text(size=9)) +
xlab("") + ylab("")
ggplotly(jDensity)
ggplot(jGathered, aes(x = Value, y = Site)) +
geom_density_ridges() +
facet_wrap(~Attribute, scale = "free", ncol = 1) +
theme(axis.text.y = element_text(size=9)) +
xlab("") + ylab("")
ggplot(jGathered, aes(x = Value, y = Site)) +
geom_density_ridges() +
facet_wrap(~Attribute, scale = "free", ncol = 2) +
theme(axis.text.y = element_text(size=9)) +
xlab("") + ylab("")
jGathered <- gather(jars, Attribute, Value, Orifice:MaxTrailing)
setwd("~/Google Drive/D copy/Ceramic Dashboard")
setwd("~/Google Drive/D copy/Ceramic Dashboard")
setwd("~/Google Drive/D copy/Ceramic Dashboard")
# Chunk 1: setup
library(flexdashboard)
library(tidyverse)
library(cowplot)
library(ggridges)
library(shiny)
library(plotly)
# Chunk 2: global
#load in the ceramic data in 'global' chunk so it can be shared by all users of the dashboard
jars <- read.csv("~/Google Drive/D copy/Ceramic Dashboard/jars_cont.csv")
jnames <- names(jars)
# Chunk 3
jhist <- jars %>%
group_by(Site)%>%
ggplot() + geom_histogram(aes(x = Site, fill = ..count..), stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") +
scale_fill_gradient2(low=("green4"), high="darkgreen", mid = 1) + xlab("Jars")
ggplotly(jhist)
# Chunk 4
#Gather Jar dataset
jGathered <- gather(jars, Attribute, Value, Orifice:MaxTrailing)
#Plot jar density ridgeline
ggplot(jGathered, aes(x = Value, y = Site)) +
geom_density_ridges() +
facet_wrap(~Attribute, scale = "free", ncol = 3) +
theme(axis.text.y = element_text(size=11), strip.text.x = element_text(size=13)) +
xlab("") + ylab("")
# Chunk 5
headerPanel("Jar Attribute Explorer")
#Select variable for y-axis
selectInput("y",
label = "Jar attribute on Y-axis:",
choices = c("Orifice Diameter (cm)" = "Orifice",
"Lip Thickness (mm)" = "MaxLip",
"Thickness at Shoulder (mm)" = "MaxShoulder",
"Wall Thickness Below Shoulder (mm)" = "MaxWall",
"Rim Angle (90 degrees = vertical)" = "RimAngle",
"Cord-marking Thickness (mm)" = "MaxCM",
"Trailing Thickness (mm)" = "MaxTrailing"),
selected = "RimAngle")
#Select variable for x-axis
selectInput("x",
label = "Jar attribute on X-axis:",
choices = c("Orifice Diameter (cm)" = "Orifice",
"Lip Thickness (mm)" = "MaxLip",
"Thickness at Shoulder (mm)" = "MaxShoulder",
"Wall Thickness Below Shoulder (mm)" = "MaxWall",
"Rim Angle (90 degrees = vertical)" = "RimAngle",
"Cord-marking Thickness (mm)" = "MaxCM",
"Trailing Thickness (mm)" = "MaxTrailing"),
selected = "Orifice")
#Slider for plot height
sliderInput('plotHeight', 'Height of plot (in pixels)',
min = 100, max = 2000, value = 600)
jGathered
plates <- read.csv("~/Google Drive/D copy/Ceramic Dashboard/plates_cont.csv")
plates %>%
group_by(Site)%>%
ggplot() + geom_histogram(aes(x = Site, fill = ..count..), stat = "count") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") +
scale_fill_gradient2() + xlab("Plates")
View(plates)
gather(plates, Attribute, Value, MaxDiameter:MaxTrailing)
pGathered <- gather(plates, Attribute, Value, MaxDiameter:MaxTrailing)
#Plot jar density ridgeline
ggplot(jGathered, aes(x = Value, y = Site)) +
geom_density_ridges() +
facet_wrap(~Attribute, scale = "free", ncol = 3) +
theme(axis.text.y = element_text(size=11), strip.text.x = element_text(size=13)) +
xlab("") + ylab("")
#Gather Plate dataset
pGathered <- gather(plates, Attribute, Value, MaxDiameter:MaxTrailing)
#Plot jar density ridgeline
ggplot(pGathered, aes(x = Value, y = Site)) +
geom_density_ridges() +
facet_wrap(~Attribute, scale = "free", ncol = 3) +
theme(axis.text.y = element_text(size=11), strip.text.x = element_text(size=13)) +
xlab("") + ylab("")
install.packages("extrafont")
library(extrafont)
font_import()
jars %>%
group_by(Site)%>%
ggplot() + geom_histogram(aes(x = Site, fill = ..count..), stat = "count") +
theme(axis.text.x = element_text(angle = 20, hjust = 1)) + ylab("") +
scale_fill_gradient2(low=("green4"), high="darkgreen", mid = 1) + xlab("")
ggplotly(jhist)
jars %>%
group_by(Site)%>%
ggplot() + geom_histogram(aes(x = Site, fill = ..count..), stat = "count") +
theme(axis.text.x = element_text(angle = 20, hjust = 1)) + ylab("") +
scale_fill_gradient2(low=("green4"), high="darkgreen", mid = 1) + xlab("")
View(plates)
plot(jars)
install.packages('ggsci')
library(ggsci)
ggplot(data = jars, aes_string(x = input$jx, y = input$jy, color = "Site")) + geom_point() +       theme(legend.title = element_blank()) + scale_color_uchicago()
install.packages('ggally')
install.packages('GGally')
library(GGally)
ggpairs(jars)
?ggpairs
ggpairs(jars, cardinality_threshold = 18)
ggpairs(jars[1, 5, 6, 7, 9], cardinality_threshold = 18)
jars[1, 5, 6, 7, 9]
jars[c(1, 5, 6, 7, 9)]
ggpairs(jars[c(1, 5, 6, 7, 9)], cardinality_threshold = 18)
?geom_histogram
ggplot(jars, aes(Site)) + geom_histogram()
ggplot(jars, aes(Site, RimAngle)) + geom_histogram()
ggplot(jars, aes(Site, RimAngle)) + geom_boxplot()
ggpairs(jars[c(1, 5, 6, 7, 9)], cardinality_threshold = 18)
savehistory("~/Google Drive/D copy/Ceramic Dashboard/dashboard_hist_12-31-17.Rhistory")
